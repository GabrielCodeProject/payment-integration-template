generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  name              String?
  emailVerified     Boolean            @default(false)
  image             String?
  phone             String?
  twoFactorEnabled  Boolean            @default(false)
  isActive          Boolean            @default(true)
  role              String             @default("CUSTOMER")
  stripeCustomerId  String?            @unique
  preferredCurrency String             @default("usd")
  timezone          String             @default("UTC")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  lastLoginAt       DateTime?
  accounts          Account[]
  orders            Order[]
  paymentMethods    PaymentMethod[]
  sessions          Session[]
  subscriptions     Subscription[]
  usedDiscountCodes UserDiscountCode[]

  @@index([email])
  @@index([stripeCustomerId])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  scope                 String?
  accessToken           String?
  accessTokenExpiresAt  DateTime?
  accountId             String
  createdAt             DateTime
  idToken               String?
  password              String?
  providerId            String
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime
  expiresAt DateTime
  ipAddress String?
  token     String   @unique
  updatedAt DateTime
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model Product {
  id                String           @id @default(cuid())
  name              String
  description       String?
  shortDescription  String?
  price             Decimal          @db.Decimal(10, 2)
  currency          String           @default("usd")
  compareAtPrice    Decimal?         @db.Decimal(10, 2)
  sku               String?          @unique
  isActive          Boolean          @default(true)
  isDigital         Boolean          @default(false)
  requiresShipping  Boolean          @default(true)
  stockQuantity     Int?
  lowStockThreshold Int?
  slug              String           @unique
  metaTitle         String?
  metaDescription   String?
  categories        ProductCategory[]
  tags              ProductTag[]
  images            String[]
  thumbnail         String?
  stripePriceId     String?          @unique
  stripeProductId   String?          @unique
  type              ProductType      @default(ONE_TIME)
  billingInterval   BillingInterval?
  
  // Visibility and Availability Controls
  status            ProductStatus    @default(DRAFT)
  isPublished       Boolean          @default(false)
  publishedAt       DateTime?
  availableFrom     DateTime?
  availableTo       DateTime?
  restrictedRegions String[]         @default([])
  allowedUserRoles  UserRole[]       @default([])
  maxUsers          Int?
  currentUsers      Int              @default(0)
  isLimited         Boolean          @default(false)
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  orderItems        OrderItem[]
  subscriptions     Subscription[]
  pricingTiers      PricingTier[]

  @@index([isActive])
  @@index([type])
  @@index([slug])
  @@index([stripePriceId])
  @@index([stripeProductId])
  @@index([createdAt])
  @@index([isActive, type])
  @@index([isActive, createdAt])
  @@index([type, isActive, createdAt])
  // Visibility and availability indexes
  @@index([status])
  @@index([isPublished])
  @@index([publishedAt])
  @@index([availableFrom])
  @@index([availableTo])
  @@index([isPublished, status])
  @@index([status, availableFrom, availableTo])
  @@index([isActive, isPublished, status])
  @@map("products")
}

model Order {
  id                    String            @id @default(cuid())
  orderNumber           String            @unique
  userId                String?
  customerEmail         String
  customerName          String?
  subtotal              Decimal           @db.Decimal(10, 2)
  taxAmount             Decimal           @default(0) @db.Decimal(10, 2)
  shippingAmount        Decimal           @default(0) @db.Decimal(10, 2)
  discountAmount        Decimal           @default(0) @db.Decimal(10, 2)
  total                 Decimal           @db.Decimal(10, 2)
  currency              String            @default("usd")
  status                OrderStatus       @default(PENDING)
  paymentStatus         PaymentStatus     @default(PENDING)
  fulfillmentStatus     FulfillmentStatus @default(UNFULFILLED)
  shippingAddress       Json?
  billingAddress        Json?
  shippingMethod        String?
  trackingNumber        String?
  stripePaymentIntentId String?           @unique
  stripeChargeId        String?
  paymentMethodId       String?
  discountCodeId        String?
  notes                 String?
  internalNotes         String?
  metadata              Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  paidAt                DateTime?
  shippedAt             DateTime?
  deliveredAt           DateTime?
  cancelledAt           DateTime?
  orderItems            OrderItem[]
  discountCode          DiscountCode?     @relation(fields: [discountCodeId], references: [id])
  paymentMethod         PaymentMethod?    @relation(fields: [paymentMethodId], references: [id])
  user                  User?             @relation(fields: [userId], references: [id])

  @@index([orderNumber])
  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([customerEmail])
  @@index([createdAt])
  @@index([stripePaymentIntentId])
  @@index([paymentMethodId])
  @@index([discountCodeId])
  @@index([userId, status])
  @@index([customerEmail, createdAt])
  @@index([status, paymentStatus])
  @@map("orders")
}

model OrderItem {
  id           String  @id @default(cuid())
  orderId      String
  productId    String
  productName  String
  productSku   String?
  productImage String?
  unitPrice    Decimal @db.Decimal(10, 2)
  quantity     Int
  totalPrice   Decimal @db.Decimal(10, 2)
  metadata     Json?
  order        Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product      Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  productId            String
  stripeSubscriptionId String             @unique
  stripeCustomerId     String
  stripePriceId        String
  status               SubscriptionStatus @default(ACTIVE)
  billingInterval      BillingInterval
  unitPrice            Decimal            @db.Decimal(10, 2)
  quantity             Int                @default(1)
  currency             String             @default("usd")
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  trialStart           DateTime?
  trialEnd             DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  startedAt            DateTime           @default(now())
  endedAt              DateTime?
  cancelledAt          DateTime?
  metadata             Json?
  product              Product            @relation(fields: [productId], references: [id])
  user                 User               @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([stripeSubscriptionId])
  @@index([currentPeriodEnd])
  @@index([createdAt])
  @@index([productId])
  @@index([userId, status])
  @@index([stripeCustomerId, status])
  @@index([status, currentPeriodEnd])
  @@map("subscriptions")
}

model PaymentMethod {
  id                    String            @id @default(cuid())
  userId                String
  stripePaymentMethodId String            @unique
  type                  PaymentMethodType
  brand                 String?
  last4                 String?
  expiryMonth           Int?
  expiryYear            Int?
  fingerprint           String?
  isDefault             Boolean           @default(false)
  nickname              String?
  billingAddress        Json?
  isActive              Boolean           @default(true)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  orders                Order[]
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stripePaymentMethodId])
  @@index([isDefault])
  @@index([userId, isDefault])
  @@map("payment_methods")
}

model DiscountCode {
  id                 String             @id @default(cuid())
  code               String             @unique
  name               String?
  description        String?
  type               DiscountType
  value              Decimal            @db.Decimal(10, 2)
  currency           String?
  maxUses            Int?
  maxUsesPerCustomer Int?
  currentUses        Int                @default(0)
  minimumOrderAmount Decimal?           @db.Decimal(10, 2)
  startsAt           DateTime?
  expiresAt          DateTime?
  isActive           Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  orders             Order[]
  userUsages         UserDiscountCode[]

  @@index([code])
  @@index([isActive])
  @@index([expiresAt])
  @@index([createdAt])
  @@index([isActive, expiresAt])
  @@map("discount_codes")
}

model UserDiscountCode {
  id             String       @id @default(cuid())
  userId         String
  discountCodeId String
  usageCount     Int          @default(0)
  firstUsedAt    DateTime     @default(now())
  lastUsedAt     DateTime     @updatedAt
  discountCode   DiscountCode @relation(fields: [discountCodeId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, discountCodeId])
  @@index([userId])
  @@index([discountCodeId])
  @@map("user_discount_codes")
}

model AuditLog {
  id            String   @id @default(dbgenerated("((('audit-'::text || (EXTRACT(epoch FROM now()))::text) || '-'::text) || (floor((random() * (10000)::double precision)))::text)"))
  tableName     String
  recordId      String
  action        String
  userId        String?
  userEmail     String?
  ipAddress     String?
  userAgent     String?
  oldValues     Json?
  newValues     Json?
  changedFields String[]
  timestamp     DateTime @default(now())
  sessionId     String?
  requestId     String?
  metadata      Json?

  @@index([tableName, recordId])
  @@index([userId])
  @@index([timestamp])
  @@index([action])
  @@index([tableName, action])
  @@index([userId, timestamp])
  @@index([tableName, recordId, timestamp])
  @@index([userId, action, timestamp])
  @@map("audit_logs")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Category {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  slug        String            @unique
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  products    ProductCategory[]

  @@index([name])
  @@index([slug])
  @@index([createdAt])
  @@map("categories")
}

model Tag {
  id        String       @id @default(cuid())
  name      String       @unique
  slug      String       @unique
  color     String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  products  ProductTag[]

  @@index([name])
  @@index([slug])
  @@index([createdAt])
  @@map("tags")
}

model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
  @@map("product_categories")
}

model ProductTag {
  id        String   @id @default(cuid())
  productId String
  tagId     String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([productId, tagId])
  @@index([productId])
  @@index([tagId])
  @@map("product_tags")
}

model PricingTier {
  id              String           @id @default(cuid())
  productId       String
  name            String
  description     String?
  price           Decimal          @db.Decimal(10, 2)
  currency        String           @default("usd")
  billingInterval BillingInterval?
  trialDays       Int?
  features        Json             @default("[]")
  isFreemium      Boolean          @default(false)
  isActive        Boolean          @default(true)
  sortOrder       Int              @default(0)
  stripePriceId   String?          @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  product         Product          @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, name])
  @@index([productId])
  @@index([isActive])
  @@index([sortOrder])
  @@index([productId, isActive, sortOrder])
  @@index([stripePriceId])
  @@map("pricing_tiers")
}

enum UserRole {
  CUSTOMER
  ADMIN
  SUPPORT
}

enum ProductStatus {
  DRAFT
  PUBLISHED  
  ARCHIVED
  SCHEDULED
}

enum ProductType {
  ONE_TIME
  SUBSCRIPTION
  USAGE_BASED
}

enum BillingInterval {
  DAY
  WEEK
  MONTH
  YEAR
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  PAID
  PARTIALLY_PAID
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  RETURNED
}

enum SubscriptionStatus {
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELLED
  UNPAID
  PAUSED
}

enum PaymentMethodType {
  CARD
  BANK_ACCOUNT
  PAYPAL
  APPLE_PAY
  GOOGLE_PAY
  OTHER
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}
