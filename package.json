{
  "name": "payment-integration-template",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "npx prisma generate && next build",
    "start": "next start",
    "lint": "eslint . --ext .js,.jsx,.ts,.tsx",
    "lint:fix": "eslint . --ext .js,.jsx,.ts,.tsx --fix",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "type-check": "tsc --noEmit --skipLibCheck",
    "lint:staged": "lint-staged",
    "spell:check": "cspell \"**/*.{js,jsx,ts,tsx,md,mdx,json,yaml,yml}\"",
    "quality:check": "npm run type-check && npm run lint && npm run format:check && npm run spell:check",
    "quality:fix": "npm run type-check && npm run lint:fix && npm run format",
    "env:check": "node scripts/validate-env.js",
    "env:setup": "cp .env.example .env.local && echo 'âœ… Created .env.local - please fill in the values and run npm run env:check'",
    "validate:env": "node scripts/validate-env.js",
    "predev": "npm run env:check",
    "prepare": "husky",
    "postinstall": "npx prisma generate",
    "docker:dev": "docker-compose up --build",
    "docker:dev:detached": "docker-compose up --build -d",
    "docker:dev:down": "docker-compose down",
    "docker:dev:clean": "docker-compose down -v --remove-orphans && docker system prune -f",
    "docker:dev:logs": "docker-compose logs -f",
    "docker:dev:shell": "docker-compose exec app sh",
    "docker:dev:db": "docker-compose exec postgres psql -U postgres -d payment_template_dev",
    "docker:dev:redis": "docker-compose exec redis redis-cli",
    "docker:dev:restart": "docker-compose restart",
    "docker:dev:rebuild": "docker-compose up --build --force-recreate",
    "docker:prod:build": "docker build -t nextjs-stripe-template:latest .",
    "docker:prod:run": "docker run -p 3000:3000 --env-file .env.production.example nextjs-stripe-template:latest",
    "docker:tools": "docker-compose --profile tools up -d adminer redis-commander",
    "docker:tools:down": "docker-compose --profile tools down adminer redis-commander",
    "docker:setup": "mkdir -p data/postgres data/redis && docker-compose up postgres redis -d && sleep 10 && npm run db:setup",
    "docker:health": "docker-compose exec app curl -f http://localhost:3000/api/health || echo 'Health check failed'",
    "db:setup": "npx prisma migrate deploy && npx prisma db seed",
    "db:reset": "npx prisma migrate reset --force && npx prisma db seed",
    "db:studio": "npx prisma studio",
    "db:migrate": "npx prisma migrate dev",
    "db:seed": "npx prisma db seed",
    "db:seed:dev": "SEED_MODE=development npx prisma db seed",
    "db:seed:test": "SEED_MODE=test npx prisma db seed",
    "db:seed:staging": "SEED_MODE=staging npx prisma db seed",
    "db:seed:minimal": "SEED_MODE=minimal npx prisma db seed",
    "db:generate": "npx prisma generate",
    "db:push": "npx prisma db push",
    "db:pull": "npx prisma db pull",
    "db:verify-constraints": "npx tsx scripts/verify-database-constraints.ts",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:database": "jest tests/database",
    "test:performance": "jest tests/performance",
    "test:security": "jest tests/security",
    "test:integration": "jest tests/integration",
    "test:benchmarks": "jest tests/benchmarks",
    "test:unit": "jest tests/database/unit",
    "test:migration": "jest tests/database/migration",
    "test:ci": "jest --ci --coverage --watchAll=false",
    "test:setup": "npm run test:db:setup",
    "test:teardown": "DROP_TEST_DB=true jest --clearCache",
    "test:db:setup": "TEST_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/payment_template_test npx prisma migrate deploy",
    "test:db:reset": "TEST_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/payment_template_test npx prisma migrate reset --force",
    "test:load": "jest tests/performance/load-testing.test.ts --testTimeout=60000",
    "test:benchmark": "jest tests/benchmarks --testTimeout=120000"
  },
  "dependencies": {
    "@auth/prisma-adapter": "^2.10.0",
    "@prisma/client": "^6.13.0",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-slot": "^1.2.3",
    "@stripe/react-stripe-js": "^3.9.0",
    "@stripe/stripe-js": "^7.8.0",
    "@types/bcryptjs": "^2.4.6",
    "@types/jsonwebtoken": "^9.0.10",
    "bcryptjs": "^3.0.2",
    "better-auth": "^1.3.4",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "jsonwebtoken": "^9.0.2",
    "lucide-react": "^0.536.0",
    "next": "15.4.6",
    "next-safe-action": "^8.0.8",
    "prisma": "^6.13.0",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "resend": "^5.0.0",
    "stripe": "^18.4.0",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^4.0.15",
    "zustand": "^5.0.7"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@faker-js/faker": "^9.9.0",
    "@jest/types": "^30.0.5",
    "@tailwindcss/postcss": "^4",
    "@types/benchmark": "^2.1.5",
    "@types/jest": "^30.0.0",
    "@types/node": "^20",
    "@types/pg": "^8.15.5",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/supertest": "^6.0.3",
    "@types/uuid": "^10.0.0",
    "@typescript-eslint/eslint-plugin": "^8.39.1",
    "@typescript-eslint/parser": "^8.39.1",
    "benchmark": "^2.1.4",
    "cspell": "^9.2.0",
    "dotenv": "^17.2.1",
    "eslint": "^9",
    "eslint-config-next": "15.4.6",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-import": "^2.32.0",
    "eslint-plugin-jsx-a11y": "^6.10.2",
    "eslint-plugin-security": "^3.0.1",
    "eslint-plugin-unicorn": "^60.0.0",
    "husky": "^9.1.7",
    "jest": "^30.0.5",
    "jest-environment-node": "^30.0.5",
    "lint-staged": "^16.1.5",
    "pg": "^8.16.3",
    "prettier": "^3.6.2",
    "prettier-plugin-tailwindcss": "^0.6.14",
    "supertest": "^7.1.4",
    "tailwindcss": "^4",
    "ts-jest": "^29.4.1",
    "tsx": "^4.20.4",
    "typescript": "^5",
    "uuid": "^11.1.0"
  },
  "prisma": {
    "seed": "tsx prisma/seed.ts"
  }
}
