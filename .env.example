# ================================
# ENVIRONMENT VARIABLES TEMPLATE
# ================================
# Copy this file to .env.local for development
# Never commit actual secrets to version control
# This template shows all available environment variables

# ================================
# CORE APPLICATION SETTINGS
# ================================

# Application environment - determines behavior across the app
# Values: development, production, test
NODE_ENV=development

# ================================
# AUTHENTICATION (BetterAuth)
# ================================

# BetterAuth secret key for JWT encryption and session management
# Generate with: openssl rand -base64 32
# CRITICAL: Must be at least 32 characters and kept secret
BETTER_AUTH_SECRET=your-better-auth-secret-key-here-min-32-chars

# Base URL where your application is running
# Development: http://localhost:3000
# Production: https://your-domain.com (no trailing slash)
BETTER_AUTH_URL=http://localhost:3000

# Trusted origins for CORS (optional, defaults to BETTER_AUTH_URL)
# Development: http://localhost:3000
# Production: https://your-domain.com,https://admin.your-domain.com
BETTER_AUTH_TRUSTED_ORIGINS=http://localhost:3000

# ================================
# DATABASE CONFIGURATION
# ================================

# PostgreSQL connection string for Prisma
# Development: postgresql://postgres:password@localhost:5432/payment_template_dev
# Production: Use managed database with connection pooling
# Format: postgresql://username:password@host:port/database
DATABASE_URL=postgresql://username:password@host:port/database_name

# Direct database URL for Prisma migrations (optional)
# Required in some deployment environments like Vercel with PlanetScale
# Usually same as DATABASE_URL for PostgreSQL
# DIRECT_URL=postgresql://username:password@host:port/database_name

# ================================
# STRIPE PAYMENT INTEGRATION
# ================================

# Stripe Publishable Key (client-side, safe to expose)
# Get from: https://dashboard.stripe.com/test/apikeys (development)
# Get from: https://dashboard.stripe.com/apikeys (production)
# Development: pk_test_... | Production: pk_live_...
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key_here

# Stripe Secret Key (server-side only, keep secure)
# CRITICAL: Never expose in client-side code or logs
# Development: sk_test_... | Production: sk_live_...
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key_here

# Stripe Webhook Signing Secret (optional for development)
# Get from: Stripe Dashboard > Webhooks > [Your endpoint] > Signing secret
# Required for production to verify webhook authenticity
# STRIPE_WEBHOOK_SECRET=whsec_your_webhook_signing_secret_here

# ================================
# EMAIL SERVICE (RESEND) - OPTIONAL
# ================================

# Resend API Key for transactional emails (optional)
# Get from: https://resend.com/api-keys
# Development: Can be omitted (emails will be logged to console)
# Production: Required for sending emails
# RESEND_API_KEY=re_your_resend_api_key_here

# Default sender email address (optional)
# Must be verified in your Resend account
# Development: Can use resend.dev domain for testing
# Format: "App Name <noreply@domain.com>"
# RESEND_FROM_EMAIL="Payment Template <noreply@your-domain.com>"

# ================================
# APPLICATION CONFIGURATION
# ================================

# Application URL (used for redirects, webhooks, emails)
# Development: http://localhost:3000
# Production: https://your-domain.com (no trailing slash)
NEXT_PUBLIC_APP_URL=http://localhost:3000

# Application name (displayed in UI and emails)
NEXT_PUBLIC_APP_NAME=Payment Integration Template

# ================================
# SECURITY & RATE LIMITING - OPTIONAL
# ================================

# Rate limiting configuration (optional, has defaults)
# Max requests per window period (helps prevent abuse)
# RATE_LIMIT_MAX_REQUESTS=100
# RATE_LIMIT_WINDOW_MS=900000

# CSRF protection secret (optional)
# Generate with: openssl rand -base64 32
# CSRF_SECRET=your-csrf-secret-here

# ================================
# FEATURE FLAGS - OPTIONAL
# ================================

# Debug mode (enables additional logging and dev tools)
# Values: true, false (defaults to false)
# Development: true for detailed debugging
# NEXT_PUBLIC_DEBUG_MODE=false

# Stripe test mode flag (for UI indicators)
# Values: true, false (defaults to true)
# Development: true to show test mode indicators
# NEXT_PUBLIC_STRIPE_TEST_MODE=true

# ================================
# ANALYTICS & MONITORING - OPTIONAL
# ================================

# Google Analytics measurement ID (optional)
# NEXT_PUBLIC_GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX

# PostHog analytics key (optional)
# NEXT_PUBLIC_POSTHOG_KEY=phc_your_posthog_key

# Sentry DSN for error tracking (optional)
# NEXT_PUBLIC_SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# ================================
# SETUP INSTRUCTIONS
# ================================

# 1. Copy this file to .env.local:
#    cp .env.example .env.local

# 2. Fill in the required values (marked as required above):
#    - BETTER_AUTH_SECRET (generate with: openssl rand -base64 32)
#    - DATABASE_URL (your PostgreSQL connection string)
#    - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY (from Stripe dashboard)
#    - STRIPE_SECRET_KEY (from Stripe dashboard)
#    - NEXT_PUBLIC_APP_URL (your app URL)

# 3. Optional: Configure email service:
#    - RESEND_API_KEY (for sending emails)
#    - RESEND_FROM_EMAIL (verified sender email)

# 4. Optional: Add analytics and monitoring:
#    - NEXT_PUBLIC_GOOGLE_ANALYTICS_ID
#    - NEXT_PUBLIC_SENTRY_DSN
#    - NEXT_PUBLIC_POSTHOG_KEY

# 5. Validate your setup:
#    npm run validate:env

# 6. Start development:
#    npm run dev

# For production deployment, see .env.production.example