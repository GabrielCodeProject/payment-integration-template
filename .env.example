# ================================
# PRODUCTION ENVIRONMENT TEMPLATE
# ================================
# Copy this file to .env.local for development or .env for production
# Never commit actual secrets - this template is for reference only

# ================================
# CORE APPLICATION SETTINGS
# ================================

# Application environment - determines behavior across the app
# Values: development, production, test
NODE_ENV=production

# Base URL where your application is deployed
# Used for NextAuth redirects, webhooks, and API callbacks
# Example: https://your-domain.com (no trailing slash)
NEXTAUTH_URL=https://your-domain.com

# Secret key for NextAuth.js JWT encryption and session management
# Generate with: openssl rand -base64 32
# CRITICAL: Must be unique and kept secret in production
NEXTAUTH_SECRET=your-super-secret-nextauth-key-here

# ================================
# DATABASE CONFIGURATION
# ================================

# PostgreSQL connection string for Prisma
# Format: postgresql://username:password@host:port/database
# Production: Use connection pooling for better performance
# Example: postgresql://user:password@localhost:5432/payment_app?connection_limit=10&pool_timeout=20
DATABASE_URL=postgresql://username:password@host:port/database_name

# Direct database URL for Prisma migrations (optional)
# Required in some deployment environments like Vercel with PlanetScale
# DIRECT_URL=postgresql://username:password@host:port/database_name

# Database connection pooling settings
# Adjust based on your deployment tier and expected load
PRISMA_POOL_TIMEOUT=20
PRISMA_CONNECTION_LIMIT=10

# ================================
# STRIPE PAYMENT INTEGRATION
# ================================

# Stripe Publishable Key (client-side, safe to expose)
# Get from: https://dashboard.stripe.com/apikeys
# Use test keys (pk_test_) for development, live keys (pk_live_) for production
STRIPE_PUBLISHABLE_KEY=pk_live_your_stripe_publishable_key_here

# Stripe Secret Key (server-side only, keep secure)
# CRITICAL: Never expose in client-side code
# Use test keys (sk_test_) for development, live keys (sk_live_) for production
STRIPE_SECRET_KEY=sk_live_your_stripe_secret_key_here

# Stripe Webhook Signing Secret
# Get from: Stripe Dashboard > Webhooks > [Your endpoint] > Signing secret
# Used to verify webhook authenticity and prevent replay attacks
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_signing_secret_here

# Stripe API Version (optional, defaults to account default)
# Format: YYYY-MM-DD (e.g., 2024-06-20)
# STRIPE_API_VERSION=2024-06-20

# ================================
# EMAIL SERVICE (RESEND)
# ================================

# Resend API Key for transactional emails
# Get from: https://resend.com/api-keys
RESEND_API_KEY=re_your_resend_api_key_here

# Default sender email address
# Must be verified in your Resend account
# Format: "Your App Name <noreply@your-domain.com>"
EMAIL_FROM="Your App <noreply@your-domain.com>"

# Support email for customer inquiries
EMAIL_SUPPORT="support@your-domain.com"

# ================================
# SECURITY & PERFORMANCE
# ================================

# CORS allowed origins (comma-separated)
# Production: Specify exact domains for security
# Example: https://your-domain.com,https://admin.your-domain.com
ALLOWED_ORIGINS=https://your-domain.com

# Rate limiting configuration
# Requests per window period (helps prevent abuse)
RATE_LIMIT_MAX=100
RATE_LIMIT_WINDOW=60000

# Content Security Policy settings
# Adjust based on your external dependencies
CSP_REPORT_URI=https://your-csp-reporting-service.com/report

# ================================
# MONITORING & LOGGING
# ================================

# Application logging level
# Values: error, warn, info, debug
# Production: Use 'warn' or 'error' to reduce log volume
LOG_LEVEL=warn

# Application insights/monitoring
# Uncomment and configure if using application monitoring services
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
# DATADOG_API_KEY=your_datadog_api_key
# NEW_RELIC_LICENSE_KEY=your_new_relic_license_key

# ================================
# DEPLOYMENT SPECIFIC
# ================================

# Application port (for containerized deployments)
# Default: 3000
PORT=3000

# Health check endpoint path
HEALTH_CHECK_PATH=/api/health

# Application version (for deployment tracking)
# Can be set via CI/CD pipeline
# APP_VERSION=1.0.0

# ================================
# FEATURE FLAGS
# ================================

# Enable/disable features without code deployment
# Values: true, false
ENABLE_STRIPE_SUBSCRIPTIONS=true
ENABLE_EMAIL_NOTIFICATIONS=true
ENABLE_USER_REGISTRATION=true
ENABLE_ADMIN_PANEL=false

# ================================
# CACHE CONFIGURATION
# ================================

# Redis connection for caching (optional)
# Format: redis://username:password@host:port
# REDIS_URL=redis://localhost:6379

# Cache TTL settings (in seconds)
CACHE_TTL_SHORT=300    # 5 minutes
CACHE_TTL_MEDIUM=1800  # 30 minutes
CACHE_TTL_LONG=3600    # 1 hour

# ================================
# WEBHOOK ENDPOINTS
# ================================

# Your application's webhook endpoints
# Used by external services to send notifications
WEBHOOK_BASE_URL=https://your-domain.com/api/webhooks

# Webhook security tokens (if implementing custom webhooks)
# WEBHOOK_SECRET_TOKEN=your_webhook_secret_token

# ================================
# THIRD-PARTY INTEGRATIONS
# ================================

# Analytics tracking
# GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX
# MIXPANEL_TOKEN=your_mixpanel_token

# Customer support chat
# INTERCOM_APP_ID=your_intercom_app_id
# ZENDESK_SUBDOMAIN=your-zendesk-subdomain

# ================================
# BACKUP & DISASTER RECOVERY
# ================================

# Backup storage configuration (if implementing automated backups)
# AWS_BACKUP_BUCKET=your-backup-bucket
# AWS_ACCESS_KEY_ID=your_aws_access_key
# AWS_SECRET_ACCESS_KEY=your_aws_secret_key
# AWS_REGION=us-east-1