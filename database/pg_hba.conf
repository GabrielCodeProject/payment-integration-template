# PostgreSQL Client Authentication Configuration File
# NextJS Stripe Payment Template - Security Hardened Configuration
# PCI DSS Compliant Authentication Rules

# TYPE  DATABASE        USER            ADDRESS                 METHOD

# ============================================================================
# LOCAL CONNECTIONS (Unix Domain Sockets)
# ============================================================================

# Local superuser connections (for administrative tasks)
local   all             postgres                                peer

# Local connections for application users with password authentication
local   all             app_readwrite                           scram-sha-256
local   all             app_readonly                            scram-sha-256
local   all             app_monitor                             scram-sha-256
local   all             pgbouncer_admin                         scram-sha-256

# ============================================================================
# IPv4 LOCAL CONNECTIONS
# ============================================================================

# Localhost connections (127.0.0.1) with strong authentication
host    all             postgres        127.0.0.1/32           scram-sha-256
host    all             app_readwrite   127.0.0.1/32           scram-sha-256
host    all             app_readonly    127.0.0.1/32           scram-sha-256
host    all             app_monitor     127.0.0.1/32           scram-sha-256
host    all             pgbouncer_admin 127.0.0.1/32           scram-sha-256

# ============================================================================
# DOCKER NETWORK CONNECTIONS (Container-to-Container)
# ============================================================================

# Docker bridge network (172.20.0.0/16) - from docker-compose.yml
# SSL required for all external connections

# Application container connections through PgBouncer
hostssl payment_template_dev app_readwrite 172.20.0.0/16      scram-sha-256
hostssl payment_template_dev app_readonly   172.20.0.0/16      scram-sha-256
hostssl payment_template_dev app_monitor    172.20.0.0/16      scram-sha-256

# PgBouncer administrative connections
hostssl payment_template_dev pgbouncer_admin   172.20.0.0/16   scram-sha-256
hostssl payment_template_dev pgbouncer_monitor 172.20.0.0/16   scram-sha-256

# Backup user connections (for automated backups)
hostssl payment_template_dev app_backup     172.20.0.0/16      scram-sha-256

# Migration user connections (for database schema changes)
hostssl payment_template_dev app_migrate    172.20.0.0/16      scram-sha-256

# ============================================================================
# IPv6 LOCAL CONNECTIONS
# ============================================================================

# IPv6 localhost with strong authentication
host    all             postgres        ::1/128                scram-sha-256
host    all             app_readwrite   ::1/128                scram-sha-256
host    all             app_readonly    ::1/128                scram-sha-256
host    all             app_monitor     ::1/128                scram-sha-256

# ============================================================================
# PRODUCTION NETWORK CONNECTIONS (Uncomment and modify for production)
# ============================================================================

# Production application servers (replace with actual IP ranges)
# hostssl payment_template_prod app_readwrite 10.0.1.0/24      scram-sha-256 clientcert=1
# hostssl payment_template_prod app_readonly   10.0.1.0/24      scram-sha-256 clientcert=1
# hostssl payment_template_prod app_monitor    10.0.2.0/24      scram-sha-256 clientcert=1

# Production backup servers
# hostssl payment_template_prod app_backup     10.0.3.0/24      scram-sha-256 clientcert=1

# Production PgBouncer servers
# hostssl payment_template_prod pgbouncer_admin   10.0.1.0/24   scram-sha-256 clientcert=1
# hostssl payment_template_prod pgbouncer_monitor 10.0.2.0/24   scram-sha-256 clientcert=1

# ============================================================================
# SECURITY RULES - DENY ALL OTHER CONNECTIONS
# ============================================================================

# Explicitly deny all other connections for security
# This rule should be last to catch any unmatched connection attempts

# Deny all other IPv4 connections
host    all             all             0.0.0.0/0              reject

# Deny all other IPv6 connections  
host    all             all             ::/0                   reject

# ============================================================================
# SECURITY NOTES
# ============================================================================

# 1. Rules are processed in order - first match wins
# 2. All production connections MUST use SSL (hostssl)
# 3. SCRAM-SHA-256 is the most secure password authentication method
# 4. Client certificates (clientcert=1) provide additional security
# 5. Never use 'trust' authentication in production
# 6. Regularly review and audit connection logs
# 7. Monitor failed authentication attempts
# 8. Use IP restrictions to limit access to known sources
# 9. Consider using certificate authentication for high-security environments
# 10. Test authentication configuration thoroughly before deployment

# ============================================================================
# COMPLIANCE NOTES (PCI DSS)
# ============================================================================

# This configuration implements PCI DSS requirements:
# - Requirement 2.3: Encrypt all non-console administrative access (SSL)
# - Requirement 4.1: Use strong cryptography for data transmission (SSL/TLS)
# - Requirement 7: Restrict access by business need-to-know (user restrictions)
# - Requirement 8.2: Strong authentication methods (SCRAM-SHA-256)
# - Requirement 8.5: Prevent use of shared accounts (individual user accounts)