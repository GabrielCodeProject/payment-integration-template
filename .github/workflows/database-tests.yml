name: Database Testing and Performance Analysis

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  database-unit-tests:
    name: Database Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: payment_template_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
      run: |
        npx prisma migrate deploy
        
    - name: Run database unit tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
        NODE_ENV: test
      run: npm run test:unit
      
    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: coverage/

  database-integration-tests:
    name: Database Integration Tests
    runs-on: ubuntu-latest
    needs: database-unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: payment_template_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
      run: |
        npx prisma migrate deploy
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
        NODE_ENV: test
      run: npm run test:integration
      
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: coverage/

  database-security-tests:
    name: Database Security Tests
    runs-on: ubuntu-latest
    needs: database-unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: payment_template_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
      run: |
        npx prisma migrate deploy
        
    - name: Run security tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
        NODE_ENV: test
      run: npm run test:security
      
    - name: Upload security test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-test-results
        path: coverage/

  database-performance-tests:
    name: Database Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: payment_template_test
          POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup enhanced test database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
      run: |
        npx prisma migrate deploy
        # Enable pg_stat_statements for query analysis
        docker exec ${{ job.services.postgres.id }} psql -U postgres -d payment_template_test -c "CREATE EXTENSION IF NOT EXISTS pg_stat_statements;"
        
    - name: Run performance tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
        NODE_ENV: test
        MONITOR_PERFORMANCE: true
        WRITE_PERFORMANCE_REPORT: true
      run: npm run test:performance
      
    - name: Run benchmark tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
        NODE_ENV: test
        MONITOR_PERFORMANCE: true
      run: npm run test:benchmark
      timeout-minutes: 15
      
    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-reports
        path: |
          coverage/
          test-performance-report.json
        retention-days: 30

  database-migration-tests:
    name: Database Migration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: payment_template_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Test migrations from scratch
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
      run: |
        npx prisma migrate deploy
        npx prisma db seed
        
    - name: Run migration integrity tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
        NODE_ENV: test
      run: npm run test:migration
      
    - name: Test migration rollback (if supported)
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
      run: |
        # Test that database can be reset and re-migrated
        npx prisma migrate reset --force
        npx prisma migrate deploy

  load-testing:
    name: Database Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[load-test]')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: payment_template_test
          # Enhanced settings for load testing
          POSTGRES_MAX_CONNECTIONS: 200
          POSTGRES_SHARED_BUFFERS: 256MB
          POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test database for load testing
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
      run: |
        npx prisma migrate deploy
        
    - name: Run load tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/payment_template_test
        NODE_ENV: test
        MONITOR_PERFORMANCE: true
      run: npm run test:load
      timeout-minutes: 20
      
    - name: Upload load test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: load-test-results
        path: coverage/
        retention-days: 7

  test-summary:
    name: Test Summary and Reporting
    runs-on: ubuntu-latest
    needs: [database-unit-tests, database-integration-tests, database-security-tests, database-migration-tests]
    if: always()
    
    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v4
      with:
        path: test-results/
        
    - name: Generate test summary
      run: |
        echo "# Database Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ${{ needs.database-unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.database-integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Tests: ${{ needs.database-security-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Migration Tests: ${{ needs.database-migration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.database-unit-tests.result }}" == "success" && 
              "${{ needs.database-integration-tests.result }}" == "success" && 
              "${{ needs.database-security-tests.result }}" == "success" && 
              "${{ needs.database-migration-tests.result }}" == "success" ]]; then
          echo "✅ All database tests passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some database tests failed. Please review the logs." >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const summary = `
          ## 🧪 Database Test Results
          
          | Test Suite | Status |
          |------------|--------|
          | Unit Tests | ${{ needs.database-unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |
          | Integration Tests | ${{ needs.database-integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |
          | Security Tests | ${{ needs.database-security-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |
          | Migration Tests | ${{ needs.database-migration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |
          
          ${(needs.database-unit-tests.result == 'success' && 
             needs.database-integration-tests.result == 'success' && 
             needs.database-security-tests.result == 'success' && 
             needs.database-migration-tests.result == 'success') 
             ? '🎉 All database tests are passing!' 
             : '⚠️ Some tests need attention. Please check the workflow logs.'}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });